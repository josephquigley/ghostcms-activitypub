#!/usr/bin/env node

/**
 * Module dependencies.
 */

// Load config
require('dotenv').config()
const utils = require('../utils')
const fs = require('fs')

if (!fs.existsSync('.env')) {
  console.error('ERROR: .env file is missing')
  process.exit(1)
}

/** Sanitize user inputs **/
if (process.env.GHOST_SERVER === '') {
  throw new Error('.env GHOST_SERVER value is required. Got empty.')
}

process.env.GHOST_SERVER = utils.removeHttpURI(process.env.GHOST_SERVER).replace(/\/\s*$/g, '')

if (process.env.ACCOUNT_USERNAME === '') {
  throw new Error('.env ACCOUNT_USERNAME value is required. Got empty.')
}

if (process.env.GHOST_CONTENT_API_KEY === '') {
  throw new Error('.env GHOST_CONTENT_API_KEY value is required. Got empty.')
}

process.env.API_ROOT_PATH = process.env.API_ROOT_PATH.replace(/\s+/g, '')
if (!process.env.API_ROOT_PATH.startsWith('/')) {
  process.env.API_ROOT_PATH = '/' + process.env.API_ROOT_PATH
}

process.env.API_ROOT_PATH = process.env.API_ROOT_PATH.replace(/\/\s*$/g, '')

if (process.env.SERVER_DOMAIN === '') {
  process.env.SERVER_DOMAIN = process.env.GHOST_SERVER
}
process.env.SERVER_DOMAIN = utils.removeHttpURI(process.env.SERVER_DOMAIN).replace(/\/\s*$/g, '')

if (process.env.PROFILE_URL === '') {
  process.env.PROFILE_URL = 'https://' + process.env.GHOST_SERVER
}

/** End Sanitize user inputs **/

var app = require('../app');
var debug = require('debug')('ghostcms-activitypub:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
